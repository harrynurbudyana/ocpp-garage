version: "2.2"

services:
  ocpp-rabbitmq:
    image: rabbitmq:3.12.0-management
    restart: always
    env_file:
      - .env
    ports:
      - "${RABBITMQ_PORT}:${RABBITMQ_PORT}"
      - "${RABBITMQ_UI_PORT}:${RABBITMQ_UI_PORT}"
    environment:
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_PASS}"
    healthcheck:
      test: "exit 0"
    networks:
      - app-network

  ocpp-db:
    image: postgres:15.3-bullseye
    restart: always
    container_name: ocpp-db
    volumes:
      - ./db_data/postgres:/var/lib/postgres
    env_file:
      - .env
    ports:
      - "${DB_PORT}:${DB_PORT}"
    environment:
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
      POSTGRES_DB: "${DB_NAME}"
      PGDATA: "/var/lib/postgres"
    healthcheck:
      test: "exit 0"
    networks:
      - app-network


  ocpp-gateway:
    container_name: ocpp-gateway
    image: "heroyooki/charge_point_node:${IMAGE_TAG}"
    restart: always
    ports:
      - "${WS_SERVER_PORT}:${WS_SERVER_PORT}"
    env_file:
      - .env
    command: >
      sh -c "cd /usr/src/app && python main.py"
    depends_on:
      ocpp-rabbitmq:
        condition: service_healthy
    networks:
      - app-network
  
  ocpp-manager:
    container_name: ocpp-manager
    build:
      context: .
      dockerfile: Dockerfile
      args:
        GITHUB_TOKEN: "${GITHUB_TOKEN}"
    volumes:
      - ./backend:/usr/src/csms/backend
    ports:
      - "${HTTP_SERVER_PORT}:${HTTP_SERVER_PORT}"
    env_file:
      - .env
    networks:
      - app-network
    restart: always
    command: >
      sh -c "stripe listen --forward-to '${ALLOWED_ORIGIN}:${HTTP_SERVER_PORT}/stripe-webhook' &
             cd /usr/src/csms/backend && alembic upgrade head &&
             uvicorn main:app --host 0.0.0.0 --port ${HTTP_SERVER_PORT} --reload"
    depends_on:
      ocpp-rabbitmq:
        condition: service_healthy
      ocpp-db:
        condition: service_healthy
    healthcheck:
      test: "exit 0"

  ocpp-frontend:
    container_name: ocpp-frontend
    restart: always
    image: node:18.17-bullseye
    volumes:
      - ./frontend:/usr/src/csms/frontend
    ports:
      - "${UI_SERVER_PORT}:${UI_SERVER_PORT}"
    networks:
      - app-network
    command: >
      sh -c "cd /usr/src/csms/frontend &&
             yarn install && 
             yarn dev --port ${UI_SERVER_PORT} --host 0.0.0.0"
    depends_on:
      ocpp-manager:
        condition: service_healthy

  ocpp-nginx:
    image: nginx:1.24.0-bullseye
    ports:
      - "80:80"
    volumes:
      - ./conf:/etc/nginx/conf.d
    depends_on:
      - ocpp-frontend
    networks:
      - app-network

  ocpp-redis:
    container_name: ocpp-redis
    image: redis:4-buster
    networks:
      - app-network

  mailhog:
    image: mailhog/mailhog
    logging:
      driver: 'none'  # disable saving logs
    ports:
      - "1025:1025" # smtp server
      - "8025:8025" # web ui
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

